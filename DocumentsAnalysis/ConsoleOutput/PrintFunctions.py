"""===============================================================================*
| В данном модуле находится просто набор функций для вывода различных сообщений   |
| пользователю во время его взаимодействия с программой. Используются стандартные |
| ANSI-escapes коды.                                                              |
*==============================================================================="""

"""ФУНКЦИИ ВЫВОДА ФОРМАТИРОВАННОЙ ИНФОРМАЦИИ"""
def print_welcome():    
    width = 80
    print(f"\u001b[38;5;45m{'=' * width}\u001b[0m") 
    print(f"\u001b[38;5;45m|{' ' * 25}\u001b[0mДОБРО ПОЖАЛОВАТЬ В ПРОГРАММУ\u001b[38;5;45m{' ' * 25}|\u001b[0m")
    print(f"\u001b[38;5;44m{'=' * width}\u001b[0m", end='\n\n')

def print_info_information(info: str, end='\n'):
    print(f"\u001b[38;5;45m[INFO]\u001b[0m {info}", end=end) 

def print_warning_information(info: str, end='\n'):
    print(f"\u001b[38;5;208m[WARN]\u001b[0m {info}", end=end) 

def print_critical_information(info: str, end='\n'):
    print(f"\u001b[38;5;196m[CRITICAL]\u001b[0m {info}", end=end) 

def print_success_information(info: str, end='\n'):
    print(f"\u001b[38;5;46m[SUCCESS]\u001b[0m {info}", end=end) 

def print_result_information(info: str, end='\n'):
    print(f"\u001b[38;5;92m{info}\u001b[0m", end=end)

def print_line(end='\n\n'):
    width = 100
    print(f"\u001b[38;5;60m{'-' * width}\u001b[0m", end=end) 

def print_learning(end='\n'):
    print("\u001b[38;5;36m<===================================>\u001b[0m\n"
          "\u001b[38;5;36m|\u001b[0m ОБУЧЕНИЕ, ВАЛИДАЦИЯ, ТЕСТИРОВАНИЕ \u001b[38;5;36m|\u001b[0m\n"
          "\u001b[38;5;36m<===================================>\u001b[0m", 
          end=end)


"""ФУНКЦИИ ВЫВОДА ДЛЯ РАЗРАБОТЧИКА"""
def print_dev_menu():
    print("1 - Аннотировать датасет .pdf документов в формате .json.")
    print("2 - Отредактировать аннотированный датасет в формате .json.")
    print("3 - Сформировать датасет патчей в формате .jpg и отбалансировать его.")
    print("4 - Использовать модель ResNet50 для дообучения на датасете патчей.")
    print("5 - Выход.")

def print_dev_opt1_info():
    print_info_information(
        "\n\tИспользуя данную опцию предполагается, что где-то уже сформирован          "
        "\n\tготовый датасет .pdf документов, который выглядит примерно как:            "
        "\n\t./dataset                                                                  "
        "\n\t|--./test_set                                                              "         
        "\n\t|   |--/genuine/...                                                        "
        "\n\t|   |--/forged/...                                                         "
        "\n\t|--./training_set                                                          " 
        "\n\t|   |--/genuine/...                                                        "
        "\n\t|   |--/forged/...                                                         "
        "\n\t|--./validation_set                                                        "
        "\n\t    |--/genuine/...                                                        "
        "\n\t    |--/forged/...                                                         "
        "\n\tДатасет будет разбит по умолчанию на патчи 224х224 и сохранен c именем     "
        "\n\t./annotations/ в директорию проекта с аналогичной структурой.              "
        "\n\tРазмер патчей строго важен для обучения модели! (Требование ResNet50)      "
        "\n\tНеобходимо будет указать полный путь к аналогичной папке ./dataset         "
        "\n\tВсе патчи будут аннотированы как оригинальные по умолчанию!                "
        "\n\tИз датасета будут удалены сломанные файлы!!!                               "
        "\n\tdpi будет выбран автоматически для равномерности ценной информации патча!  ",
        end='\n\n')

def print_dev_opt2_info():
    print_info_information(
        "\n\tИспользуя данную опцию предполагается, что помимо указанного для анализа   "
        "\n\tдокумента будет открыт этот же документ в формате .pdf.                    "
        "\n\tРедактирование происходит путём выискивания области подделок на исходном   "
        "\n\tдокументе, а затем сравнении этих областей с выводимыми патчами. Далее     "
        "\n\tвручную проставляются уже необходимые метки подделок в .json файлах.       "
        "\n\tАнализировать стоит только поддельные файлы, так как оригинальные были     "
        "\n\tаннотированы верно!                                                        ",
        end='\n\n')

def print_dev_opt3_info():
    print_info_information(
        "\n\tИспользуя данную опцию предполагается, что где-то уже сформирован          "
        "\n\tготовый датасет .pdf документов, который выглядит примерно как:            "
        "\n\t./dataset                                                                  "
        "\n\t|--./test_set                                                              "         
        "\n\t|   |--/genuine/...                                                        "
        "\n\t|   |--/forged/...                                                         "
        "\n\t|--./training_set                                                          " 
        "\n\t|   |--/genuine/...                                                        "
        "\n\t|   |--/forged/...                                                         "
        "\n\t|--./validation_set                                                        "
        "\n\t    |--/genuine/...                                                        "
        "\n\t    |--/forged/...                                                         "
        "\n\tА также сформирован аналогичный аннотированный датасет ./annotations в     "
        "\n\tдиректории проекта.                                                        "
        "\n\tОпция производит выбор по указанным данным необходимого количества для     "
        "\n\tобучения оригинальных патчей, а также приведение числа поддельных патчей   "
        "\n\tпутём аугментаций к требуемому количеству для баланса датасета и более     "
        "\n\tстабильного обучения модели на обучающей выборке.                          "
        "\n\tТакже будет создан датасет тестировочной и валидационной выборки.          "
        "\n\tСохранение будет произведено в папку проекта './dataset_patches'           ",
        end='\n\n')

def print_dev_opt4_info():
    print_info_information(
        "\n\tИспользуя данную опцию предполагается, что в директории проекта уже        "
        "\n\tсформирован готовый датасет .jpeg патчей документов, который выглядит      "
        "\n\tпримерно как:                                                              "
        "\n\t./dataset_patches                                                          "
        "\n\t|--./test_set                                                              "         
        "\n\t|   |--/genuine/...                                                        "
        "\n\t|   |--/forged/...                                                         "
        "\n\t|--./training_set                                                          " 
        "\n\t|   |--/genuine/...                                                        "
        "\n\t|   |--/forged/...                                                         "
        "\n\t|--./validation_set                                                        "
        "\n\t    |--/genuine/...                                                        "
        "\n\t    |--/forged/...                                                         "
        "\n\tОпция производит дообучение модели ResNet50 на основе датасета по          "
        "\n\tэтапам обучения, валидации и тестирования!                                 ",
        end='\n\n')


"""ФУНКЦИИ ВЫВОДА ДЛЯ ПОЛЬЗОВАТЕЛЯ"""
def print_user_menu():
    print()

